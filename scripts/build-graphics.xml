<!--
  ~ Copyright (C) 2018 Universal Character/Graphics display library
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation, either version 3 of the
  ~ License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Lesser Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Lesser Public
  ~ License along with this program.  If not, see
  ~ <http://www.gnu.org/licenses/lgpl-3.0.html>.
  -->

<!--
- Required property: root.dir
-
- Usage: ant -Droot.dir=<path> <target-name>
-->
<project name="ucgd-build-graphics" basedir=".">

    <!-- Build properties -->
    <property name="project.dir.root" location="${root.dir}"/>
    <property name="project.dir.base" location="${project.dir.root}/native/modules/graphics"/>
    <property name="project.dir.target" value="${project.dir.base}/target"/>
    <property name="project.target.dir.linux.amd64" value="${project.dir.target}/classes/lib/linux/amd64"/>
    <property name="project.target.dir.linux.arm" value="${project.dir.target}/classes/lib/linux/arm"/>
    <property name="project.target.dir.win.amd64" value="${project.dir.target}/classes/lib/windows/amd64"/>
    <property name="project.target.dir.mac.amd64" value="${project.dir.target}/classes/lib/mac/amd64"/>
    <property name="cmake.module.dir" value="${project.dir.root}/native/cmake"/>
    <property name="cmake.generator.unix" value="-G 'CodeBlocks - Unix Makefiles'"/>
    <property name="cmake.generator.win" value="-G 'CodeBlocks - MinGW Makefiles'"/>
    <property name="cpp.proj.dir" value="${project.dir.base}/src/main/cpp"/>
    <property name="cpp.tools.dir" value="${project.dir.root}/native/tools"/>
    <property name="cpp.tools.osx.dir" value="${cpp.tools.dir}/osxcross"/>
    <property name="cpp.tools.osx.archive" value="osx-tools.tar.gz"/>
    <property name="cpp.tools.osx.sdk" value="${cpp.tools.osx.dir}/SDK/MacOSX10.11.sdk"/>
    <property name="cpp.tools.osx.target" value="darwin15"/>
    <property name="cpp.tools.osx.host" value="x86_64-apple-${cpp.tools.osx.target}"/>
    <property name="cpp.tools.rpi.dir" value="${cpp.tools.dir}/rpi"/>
    <property name="cpp.tools.osx.toolchain" value="${cmake.module.dir}/OSXToolchain.cmake"/>
    <property name="cpp.tools.rpi.toolchain" value="${cmake.module.dir}/RpiToolchain.cmake"/>
    <property name="cpp.tools.win.toolchain" value="${cmake.module.dir}/MingWToolchain.cmake"/>
    <property name="cpp.build.target" value="ucgdisp"/>
    <property name="cpp.build.dir" value="${cpp.proj.dir}/build"/>
    <property name="cpp.build.type" value="Release"/>
    <property name="cpp.build.output.linux" value="lib${cpp.build.target}.so"/>
    <property name="cpp.build.output.mac" value="lib${cpp.build.target}.dylib"/>
    <property name="cpp.build.output.win" value="${cpp.build.target}.dll"/>

    <include file="build-common.xml"/>

    <target name="generate-native-sources-all" depends="generate-native-sources-win, generate-native-sources-mac, generate-native-sources-linux-arm, generate-native-sources-linux-amd64">
        <echo>Generating native source directories to ${project.basedir}</echo>
    </target>

    <target name="generate-native-sources-win">
        <mkdir dir="${project.dir.target}/classes/lib/windows/amd64"/>
    </target>

    <target name="generate-native-sources-linux-arm">
        <mkdir dir="${project.dir.target}/classes/lib/linux/arm"/>
    </target>

    <target name="generate-native-sources-linux-amd64">
        <mkdir dir="${project.dir.target}/classes/lib/linux/amd64"/>
    </target>

    <target name="generate-native-sources-mac">
        <mkdir dir="${project.dir.target}/classes/lib/mac/amd64"/>
    </target>

    <!-- Check validity of all required tools -->
    <target name="tools-check-all" depends="tools-check-osxcross, tools-check-rpi">
        <echo>Checking validity of all required tools for native library build</echo>
    </target>

    <!-- Check if the OSX toolchain directory is valid (contains the required files) -->
    <target name="tools-check-osxcross">
        <condition property="osx.tools.dir.valid">
            <and>
                <available file="${cpp.tools.osx.dir}" type="dir"/>
                <available file="${cpp.tools.osx.dir}/bin" type="dir"/>
                <available file="${cpp.tools.osx.dir}/SDK" type="dir"/>
                <available file="${cpp.tools.osx.dir}/SDK/MacOSX10.11.sdk" type="dir"/>
                <available file="${cpp.tools.osx.dir}/bin/x86_64-apple-darwin15-wrapper" type="file"/>
            </and>
        </condition>
    </target>

    <!-- Check if RPI Tools is valid -->
    <target name="tools-check-rpi">
        <condition property="rpi.tools.dir.valid">
            <and>
                <available file="${cpp.tools.rpi.dir}" type="dir"/>
                <available file="${cpp.tools.rpi.dir}/arm-bcm2708" type="dir"/>
                <available file="${cpp.tools.rpi.dir}/arm-bcm2708/arm-linux-gnueabihf" type="dir"/>
                <available file="${cpp.tools.rpi.dir}/arm-bcm2708/arm-linux-gnueabihf/bin" type="dir"/>
                <available file="${cpp.tools.rpi.dir}/arm-bcm2708/arm-linux-gnueabihf/bin/arm-linux-gnueabihf-gcc" type="file"/>
                <available file="${cpp.tools.rpi.dir}/arm-bcm2708/arm-linux-gnueabihf/bin/arm-linux-gnueabihf-g++" type="file"/>
            </and>
        </condition>
    </target>

    <!-- Initialize osxcross toolchain -->
    <target name="init-native-tools-mac" depends="tools-check-osxcross" unless="osx.tools.dir.valid">
        <echo>Initializing OSXCross toolchain</echo>
        <echo>Deleting existing OSX toolchain directory (if applicable)</echo>
        <delete dir="${cpp.tools.osx.dir}" failonerror="false"/>
        <echo>Extracting toolchain contents from the archive</echo>
        <exec executable="tar" dir="${cpp.tools.dir}" failonerror="true">
            <arg line="xzf"/>
            <arg line="${cpp.tools.osx.archive}"/>
        </exec>
        <echo>Moving extracted contents to ${cpp.tools.osx.dir}</echo>
        <move file="${cpp.tools.dir}/target" tofile="${cpp.tools.osx.dir}"/>
    </target>

    <!-- Initialize RPi/ARM toolchain -->
    <target name="init-native-tools-rpi" depends="tools-check-rpi" unless="rpi.tools.dir.valid">
        <echo>Deleting Raspberry Pi tools directory</echo>
        <delete dir="${cpp.tools.rpi.dir}" failonerror="false"/>
    </target>

    <target name="init-native-tools-all" depends="init-native-tools-rpi, init-native-tools-mac">
        <echo>Initializing native tools (ALL)</echo>
    </target>

    <!-- Cross-compile for all OS/Arch (Can only be run from Linux) -->
    <target name="native-build-cc-all"
            depends="ucgd-build-common.os-check-linux-x86_64, native-build-linux-x86_64, native-build-cc-linux-arm, native-build-cc-windows-x86_64, native-build-cc-mac-x86_64"
            if="os.linux.amd64">
        <echo message="============================================================================"/>
        <echo message=" "/>
        <echo>Cross-compilation complete</echo>
        <echo message=" "/>
        <echo message="============================================================================"/>
    </target>

    <!-- Compile for Linux - x86_64 (Host OS) -->
    <target name="native-build-linux-x86_64" depends="ucgd-build-common.os-check-linux-x86_64, generate-native-sources-linux-amd64" if="os.linux.amd64">
        <!-- Build Linux/x86_64 -->
        <echo>[HOST=LINUX-AMD64] Compiling for Linux - x86_64</echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="-DCMAKE_BUILD_TYPE=${cpp.build.type}"/>
            <arg line="${cmake.generator.unix}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/linux/amd64"/>
        </exec>
        <exec executable="cmake" dir="${cpp.build.dir}/linux/amd64" failonerror="true">
            <arg line="--build ${cpp.build.dir}/linux/amd64"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="native-copy-resources-linux-x86_64"/>
    </target>

    <!-- Compile for Linux - ARM (Host OS) -->
    <target name="native-build-linux-arm" depends="ucgd-build-common.os-check-linux-arm, generate-native-sources-linux-arm" if="os.linux.arm">
        <!-- Build both architectures when Cross-Compiling -->
        <echo>[HOST=ARM] Building ARM binaries only</echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="${cmake.generator.unix}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/linux/arm"/>
        </exec>
        <exec executable="cmake" dir="${cpp.build.dir}/linux/arm" failonerror="true">
            <arg line="--build ${cpp.build.dir}/linux/arm"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="native-copy-resources-linux-arm"/>
    </target>

    <!-- Compile for Windows - x86_64 (Host OS) -->
    <target name="native-build-windows-x86_64" depends="ucgd-build-common.os-check-windows-x86_64, generate-native-sources-win" if="os.windows.amd64">
        <!-- Refresh CMake cache -->
        <echo>[HOST=AMD64] Compiling for Windows</echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="-DCMAKE_BUILD_TYPE=${cpp.build.type}"/>
            <arg line="${cmake.generator.win}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/windows/amd64"/>
        </exec>
        <!-- Build project -->
        <exec executable="cmake" dir="${cpp.build.dir}/windows/amd64" failonerror="true">
            <arg line="--build ${cpp.build.dir}/windows/amd64"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="native-copy-resources-win-x86_64"/>
    </target>

    <!-- Compile for MacOSX - x86_64 (Host OS) -->
    <target name="native-build-macosx-x86_64" depends="ucgd-build-common.os-check-macosx-x86_64, generate-native-sources-mac" if="os.macosx.amd64">
        <!-- Refresh CMake cache -->
        <echo>[HOST=AMD64] Invoking CMAKE Cross-compile build instructions for Mac OS
        </echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="-DCMAKE_BUILD_TYPE=${cpp.build.type}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/mac/amd64"/>
        </exec>
        <!-- Build project -->
        <exec executable="cmake" dir="${cpp.build.dir}/mac/amd64" failonerror="true">
            <arg line="--build ${cpp.build.dir}/mac/amd64"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="native-copy-resources-mac-x86_64"/>
    </target>

    <!-- Cross-compile for Linux - ARM (applicable only in linux) -->
    <target name="native-build-cc-linux-arm" depends="ucgd-build-common.os-check-linux-x86_64, init-native-tools-rpi, generate-native-sources-linux-arm" if="os.linux.amd64">
        <!-- Build Linux/ARM -->
        <echo>[HOST=LINUX-AMD64] Cross-compiling for Linux - ARM</echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="-DCMAKE_TOOLCHAIN_FILE=${cpp.tools.rpi.toolchain}"/>
            <arg line="-DCMAKE_BUILD_TYPE=${cpp.build.type}"/>
            <arg line="${cmake.generator.unix}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/linux/arm"/>
        </exec>
        <exec executable="cmake" dir="${cpp.build.dir}/linux/arm" failonerror="true">
            <arg line="--build ${cpp.build.dir}/linux/arm"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="native-copy-resources-linux-arm"/>
    </target>

    <!-- Cross compile for Windows - x86_64 (applicable only in linux) -->
    <target name="native-build-cc-windows-x86_64" depends="ucgd-build-common.os-check-linux-x86_64, generate-native-sources-win" if="os.linux.amd64">
        <!-- Build Windows/x86_64 -->
        <echo>[HOST=LINUX-AMD64] Cross-compiling for Windows - x86_64</echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="-DCMAKE_TOOLCHAIN_FILE=${cpp.tools.win.toolchain}"/>
            <arg line="-DCMAKE_BUILD_TYPE=${cpp.build.type}"/>
            <arg line="${cmake.generator.unix}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/windows/amd64"/>
        </exec>
        <exec executable="cmake" dir="${cpp.build.dir}/windows/amd64" failonerror="true">
            <arg line="--build ${cpp.build.dir}/windows/amd64"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="native-copy-resources-win-x86_64"/>
    </target>

    <!-- Cross compile for Mac OSX - x86_64 (applicable only in linux) -->
    <target name="native-build-cc-mac-x86_64" depends="ucgd-build-common.os-check-linux-x86_64, init-native-tools-mac, generate-native-sources-mac" if="os.linux.amd64">
        <!-- Build Mac/x86_64 -->
        <echo>[HOST=LINUX-AMD64] Cross-compiling for Mac - x86_64</echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="-DCMAKE_TOOLCHAIN_FILE=${cpp.tools.osx.toolchain}"/>
            <arg line="-DCMAKE_BUILD_TYPE=${cpp.build.type}"/>
            <arg line="-DOSXCROSS_HOST=${cpp.tools.osx.host}"/>
            <arg line="-DOSXCROSS_TARGET_DIR=${cpp.tools.osx.dir}"/>
            <arg line="-DOSXCROSS_SDK=${cpp.tools.osx.sdk}"/>
            <arg line="-DOSXCROSS_TARGET=${cpp.tools.osx.target}"/>
            <arg line="${cmake.generator.unix}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/mac/amd64"/>
        </exec>
        <exec executable="cmake" dir="${cpp.build.dir}/mac/amd64" failonerror="true">
            <arg line="--build ${cpp.build.dir}/mac/amd64"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="native-copy-resources-mac-x86_64"/>
    </target>

    <target name="native-copy-resources-all" depends="native-copy-resources-linux-arm, native-copy-resources-linux-x86_64, native-copy-resources-win-x86_64, native-copy-resources-mac-x86_64">
        <echo>Copying ALL native output to target resource folders</echo>
    </target>

    <!-- Copies the cmake output binaries to their respective target resource location -->
    <target name="native-copy-resources-linux-x86_64">
        <copy file="${cpp.build.dir}/linux/amd64/bin/${cpp.build.output.linux}" todir="${project.target.dir.linux.amd64}" failonerror="true"/>
    </target>

    <target name="native-copy-resources-linux-arm">
        <copy file="${cpp.build.dir}/linux/arm/bin/${cpp.build.output.linux}" todir="${project.target.dir.linux.arm}" failonerror="true"/>
    </target>

    <target name="native-copy-resources-win-x86_64">
        <copy file="${cpp.build.dir}/windows/amd64/bin/${cpp.build.output.win}" todir="${project.target.dir.win.amd64}" failonerror="true"/>
    </target>

    <target name="native-copy-resources-mac-x86_64">
        <copy file="${cpp.build.dir}/mac/amd64/bin/${cpp.build.output.mac}" todir="${project.target.dir.mac.amd64}" failonerror="true"/>
    </target>
</project>