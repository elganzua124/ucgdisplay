<!--
  ~ Copyright (C) 2018 Universal Character/Graphics display library
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation, either version 3 of the
  ~ License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Lesser Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Lesser Public
  ~ License along with this program.  If not, see
  ~ <http://www.gnu.org/licenses/lgpl-3.0.html>.
  -->

<!--
- Required property: root.dir
-
- Usage: ant -Droot.dir=<path> <target-name>
- Example: ant -Droot.dir=/home/raffy/projects/ucgdisplay native-build-cc-all
-->
<project name="ucgd-build-graphics" basedir=".">

    <!-- =========================================================================================== -->
    <!--                            PROPERTIES                                                       -->
    <!-- =========================================================================================== -->

    <!-- Project specific properties -->
    <property name="project.dir.module" value="graphics"/>
    <property name="cpp.build.target" value="ucgdisp"/>

    <!-- IMPORTANT: Include after the project specific properties!! -->
    <include file="build-common.xml"/>

    <!-- =========================================================================================== -->
    <!--                            NATIVE COMPILE DEFINITIONS                                       -->
    <!-- =========================================================================================== -->

    <!-- Compile for native Linux x86_32 -->
    <target name="native-build-linux-x86_32" depends="ucgd-build-common.os-check-linux-x86_64, ucgd-build-common.generate-native-sources-linux-x86" if="os.linux.x86_64">
        <!-- Build Linux/x86_32 -->
        <echo>[HOST=LINUX-x86_64] Compiling for native Linux 32bit - x86_32</echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="-DCMAKE_BUILD_TYPE=${cpp.build.type} -DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32 -DCMAKE_SHARED_LINKER_FLAGS=-m32"/>
            <arg line="${cmake.generator.unix}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/${cpp.build.relpath.linux-x86_32}"/>
        </exec>
        <exec executable="cmake" dir="${cpp.build.dir}/${cpp.build.relpath.linux-x86_32}" failonerror="true">
            <arg line="--build ${cpp.build.dir}/${cpp.build.relpath.linux-x86_32}"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="ucgd-build-common.native-copy-resources-linux-x86_32"/>
    </target>

    <!-- Compile for native Linux x86_64 -->
    <target name="native-build-linux-x86_64" depends="ucgd-build-common.os-check-linux-x86_64, ucgd-build-common.generate-native-sources-linux-x86" if="os.linux.x86_64">
        <!-- Build Linux/x86_64 -->
        <echo>[HOST=LINUX-x86_64] Compiling for native Linux - x86_64</echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="-DCMAKE_BUILD_TYPE=${cpp.build.type}"/>
            <arg line="${cmake.generator.unix}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/${cpp.build.relpath.linux-x86_64}"/>
        </exec>
        <exec executable="cmake" dir="${cpp.build.dir}/${cpp.build.relpath.linux-x86_64}" failonerror="true">
            <arg line="--build ${cpp.build.dir}/${cpp.build.relpath.linux-x86_64}"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="ucgd-build-common.native-copy-resources-linux-x86_64"/>
    </target>

    <!-- Compile for native Linux - ARM 32bit -->
    <target name="native-build-linux-arm32" depends="ucgd-build-common.os-check-linux-arm32, ucgd-build-common.generate-native-sources-linux-arm" if="os.linux.arm32">
        <!-- Build both architectures when Cross-Compiling -->
        <echo>[HOST=ARM] Compiling for native Linux - arm</echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="${cmake.generator.unix}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/${cpp.build.relpath.linux-arm32}"/>
        </exec>
        <exec executable="cmake" dir="${cpp.build.dir}/${cpp.build.relpath.linux-arm32}" failonerror="true">
            <arg line="--build ${cpp.build.dir}/${cpp.build.relpath.linux-arm32}"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="ucgd-build-common.native-copy-resources-linux-arm32"/>
    </target>

    <!-- Compile for native Windows - x86 32bit (Host OS) -->
    <target name="native-build-windows-x86_32" depends="ucgd-build-common.os-check-windows-x86_64, ucgd-build-common.generate-native-sources-win" if="os.windows.x86_64">
        <!-- Refresh CMake cache -->
        <echo>[HOST=x86_64] Compiling for native Windows</echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="-DCMAKE_BUILD_TYPE=${cpp.build.type}"/>
            <arg line="${cmake.generator.win}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/${cpp.build.relpath.windows-x86_32}"/>
        </exec>
        <!-- Build project -->
        <exec executable="cmake" dir="${cpp.build.dir}/${cpp.build.relpath.windows-x86_32}" failonerror="true">
            <arg line="--build ${cpp.build.dir}/${cpp.build.relpath.windows-x86_32}"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="ucgd-build-common.native-copy-resources-win-x86_32"/>
    </target>

    <!-- Compile for native Windows - x86_64 64bit (Host OS) -->
    <target name="native-build-windows-x86_64" depends="ucgd-build-common.os-check-windows-x86_64, ucgd-build-common.generate-native-sources-win" if="os.windows.x86_64">
        <!-- Refresh CMake cache -->
        <echo>[HOST=x86_64] Compiling for native Windows</echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="-DCMAKE_BUILD_TYPE=${cpp.build.type}"/>
            <arg line="${cmake.generator.win}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/${cpp.build.relpath.windows-x86_64}"/>
        </exec>
        <!-- Build project -->
        <exec executable="cmake" dir="${cpp.build.dir}/${cpp.build.relpath.windows-x86_64}" failonerror="true">
            <arg line="--build ${cpp.build.dir}/${cpp.build.relpath.windows-x86_64}"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="ucgd-build-common.native-copy-resources-win-x86_64"/>
    </target>

    <!-- Compile for native MacOSX - x86_64 (Host OS) -->
    <target name="native-build-macosx-x86_64" depends="ucgd-build-common.os-check-osx-x86_64, ucgd-build-common.generate-native-sources-osx" if="os.osx.x86_64">
        <!-- Refresh CMake cache -->
        <echo>[HOST=x86_64] Compiling for Mac OS host
        </echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="-DCMAKE_BUILD_TYPE=${cpp.build.type}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/${cpp.build.relpath.osx-x86_64}"/>
        </exec>
        <!-- Build project -->
        <exec executable="cmake" dir="${cpp.build.dir}/${cpp.build.relpath.osx-x86_64}" failonerror="true">
            <arg line="--build ${cpp.build.dir}/${cpp.build.relpath.osx-x86_64}"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="ucgd-build-common.native-copy-resources-osx-x86_64"/>
    </target>

    <!-- =========================================================================================== -->
    <!--                            CROSS COMPILE DEFINITIONS                                        -->
    <!-- =========================================================================================== -->

    <!-- Cross-compile for all OS/Arch (Can only be run from a Linux machine) -->
    <target name="native-build-cc-all" depends="ucgd-build-common.os-check-linux-x86_64,
            native-build-linux-x86_32,
            native-build-linux-x86_64,
            native-build-cc-linux-arm32,
            native-build-cc-linux-arm64,
            native-build-cc-windows-x86_32,
            native-build-cc-windows-x86_64,
            native-build-cc-osx-x86_32,
            native-build-cc-osx-x86_64"
            if="os.linux.x86_64">
        <echo message="============================================================================"/>
        <echo message=" "/>
        <echo>Cross-compilation complete</echo>
        <echo message=" "/>
        <echo message="============================================================================"/>
    </target>

    <!-- TODO: Do we have to check the OS arch? -->
    <!-- Cross-compile for Linux - ARM 32bit (Should only be run from a Linux machine) -->
    <target name="native-build-cc-linux-arm32" depends="ucgd-build-common.os-check-linux-x86_64, ucgd-build-common.init-native-tools-rpi, ucgd-build-common.generate-native-sources-linux-arm" if="os.linux.x86_64">
        <!-- Build Linux/ARM -->
        <echo>[HOST=LINUX-x86_64] Cross-compiling Linux for ARM 32bit binaries</echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="-DCMAKE_TOOLCHAIN_FILE=${cpp.tools.rpi.arm32.toolchain}"/>
            <arg line="-DCMAKE_BUILD_TYPE=${cpp.build.type}"/>
            <arg line="${cmake.generator.unix}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/${cpp.build.relpath.linux-arm32}"/>
        </exec>
        <exec executable="cmake" dir="${cpp.build.dir}/${cpp.build.relpath.linux-arm32}" failonerror="true">
            <arg line="--build ${cpp.build.dir}/${cpp.build.relpath.linux-arm32}"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="ucgd-build-common.native-copy-resources-linux-arm32"/>
    </target>

    <!-- Cross-compile for Linux - ARM 64bit aarch64 (Should only be run from a Linux machine) -->
    <target name="native-build-cc-linux-arm64" depends="ucgd-build-common.os-check-linux-x86_64, ucgd-build-common.init-native-tools-rpi, ucgd-build-common.generate-native-sources-linux-arm" if="os.linux.x86_64">
        <!-- Build Linux/ARM -->
        <echo>[HOST=LINUX-x86_64] Cross-compiling Linux for ARM 64bit binaries</echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="-DCMAKE_TOOLCHAIN_FILE=${cpp.tools.rpi.arm64.toolchain}"/>
            <arg line="-DCMAKE_BUILD_TYPE=${cpp.build.type}"/>
            <arg line="${cmake.generator.unix}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/${cpp.build.relpath.linux-arm64}"/>
        </exec>
        <exec executable="cmake" dir="${cpp.build.dir}/${cpp.build.relpath.linux-arm64}" failonerror="true">
            <arg line="--build ${cpp.build.dir}/${cpp.build.relpath.linux-arm64}"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="ucgd-build-common.native-copy-resources-linux-arm64"/>
    </target>

    <!-- Cross compile for Windows - 32bit x86_32 (Should only be run from a Linux machine) -->
    <target name="native-build-cc-windows-x86_32" depends="ucgd-build-common.os-check-linux-x86_64, ucgd-build-common.generate-native-sources-win" if="os.linux.x86_64">
        <!-- Build Windows/x86 -->
        <echo>[HOST=LINUX-x86_64] Cross-compiling for Windows 32bit binaries</echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="-DCMAKE_TOOLCHAIN_FILE=${cpp.tools.win.x86_32.toolchain}"/>
            <arg line="-DCMAKE_BUILD_TYPE=${cpp.build.type}"/>
            <arg line="${cmake.generator.unix}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/${cpp.build.relpath.windows-x86_32}"/>
        </exec>
        <exec executable="cmake" dir="${cpp.build.dir}/${cpp.build.relpath.windows-x86_32}" failonerror="true">
            <arg line="--build ${cpp.build.dir}/${cpp.build.relpath.windows-x86_32}"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="ucgd-build-common.native-copy-resources-win-x86_32"/>
    </target>

    <!-- Cross compile for Windows - 64bit x86_64 (Should only be run from a Linux machine) -->
    <target name="native-build-cc-windows-x86_64" depends="ucgd-build-common.os-check-linux-x86_64, ucgd-build-common.generate-native-sources-win" if="os.linux.x86_64">
        <!-- Build Windows/x86_64 -->
        <echo>[HOST=LINUX-x86_64] Cross-compiling for Windows 64bit binaries</echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="-DCMAKE_TOOLCHAIN_FILE=${cpp.tools.win.x86_64.toolchain}"/>
            <arg line="-DCMAKE_BUILD_TYPE=${cpp.build.type}"/>
            <arg line="${cmake.generator.unix}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/${cpp.build.relpath.windows-x86_64}"/>
        </exec>
        <exec executable="cmake" dir="${cpp.build.dir}/${cpp.build.relpath.windows-x86_64}" failonerror="true">
            <arg line="--build ${cpp.build.dir}/${cpp.build.relpath.windows-x86_64}"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="ucgd-build-common.native-copy-resources-win-x86_64"/>
    </target>

    <!-- Cross compile for Mac OSX - 32bit x86_32 (Should only be run from a Linux machine) -->
    <target name="native-build-cc-osx-x86_32" depends="ucgd-build-common.os-check-linux-x86_64, ucgd-build-common.init-native-tools-osx, ucgd-build-common.generate-native-sources-osx" if="os.linux.x86_64">
        <!-- Build Mac/x86 -->
        <echo>[HOST=LINUX-x86_64] Cross-compiling for Mac - x86_32</echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="-DCMAKE_TOOLCHAIN_FILE=${cpp.tools.osx.x86_32.toolchain}"/>
            <arg line="-DCMAKE_BUILD_TYPE=${cpp.build.type}"/>
            <arg line="-DOSXCROSS_HOST=${cpp.tools.osx.host}"/>
            <arg line="-DOSXCROSS_TARGET_DIR=${cpp.tools.osx.dir}"/>
            <arg line="-DOSXCROSS_SDK=${cpp.tools.osx.sdk}"/>
            <arg line="-DOSXCROSS_TARGET=${cpp.tools.osx.target}"/>
            <arg line="${cmake.generator.unix}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/${cpp.build.relpath.osx-x86_32}"/>
        </exec>
        <exec executable="cmake" dir="${cpp.build.dir}/${cpp.build.relpath.osx-x86_32}" failonerror="true">
            <arg line="--build ${cpp.build.dir}/${cpp.build.relpath.osx-x86_32}"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="ucgd-build-common.native-copy-resources-osx-x86_32"/>
    </target>

    <!-- Cross compile for Mac OSX - 64bit x86_64 (Should only be run from a Linux machine) -->
    <target name="native-build-cc-osx-x86_64" depends="ucgd-build-common.os-check-linux-x86_64, ucgd-build-common.init-native-tools-osx, ucgd-build-common.generate-native-sources-osx" if="os.linux.x86_64">
        <!-- Build Mac/x86_64 -->
        <echo>[HOST=LINUX-X86_64] Cross-compiling for Mac - x86_64</echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="-DCMAKE_TOOLCHAIN_FILE=${cpp.tools.osx.x86_64.toolchain}"/>
            <arg line="-DCMAKE_BUILD_TYPE=${cpp.build.type}"/>
            <arg line="-DOSXCROSS_HOST=${cpp.tools.osx.host}"/>
            <arg line="-DOSXCROSS_TARGET_DIR=${cpp.tools.osx.dir}"/>
            <arg line="-DOSXCROSS_SDK=${cpp.tools.osx.sdk}"/>
            <arg line="-DOSXCROSS_TARGET=${cpp.tools.osx.target}"/>
            <arg line="${cmake.generator.unix}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/${cpp.build.relpath.osx-x86_64}"/>
        </exec>
        <exec executable="cmake" dir="${cpp.build.dir}/${cpp.build.relpath.osx-x86_64}" failonerror="true">
            <arg line="--build ${cpp.build.dir}/${cpp.build.relpath.osx-x86_64}"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="ucgd-build-common.native-copy-resources-osx-x86_64"/>
    </target>
</project>