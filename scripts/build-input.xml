<!--
  ~ Copyright (C) 2018 Universal Character/Graphics display library
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation, either version 3 of the
  ~ License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Lesser Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Lesser Public
  ~ License along with this program.  If not, see
  ~ <http://www.gnu.org/licenses/lgpl-3.0.html>.
  -->

<project name="ucgd-build-input" default="native-build-cc-all" basedir=".">
    <!-- Project specific properties -->
    <property name="project.dir.module" value="input"/>
    <property name="cpp.build.target" value="ucginput"/>

    <!-- IMPORTANT: Include after the project specific properties!! -->
    <include file="build-common.xml"/>

    <target name="skip-build">
        <echo>Skipping build for ${os.name} - ${os.arch} - ${os.version}</echo>
    </target>

    <!-- =========================================================================================== -->
    <!--                            NATIVE COMPILE DEFINITIONS                                       -->
    <!-- =========================================================================================== -->

    <!-- Compile for Linux - x86_64 32bit (32bit Host OS) -->
    <target name="native-build-linux-x86_32" depends="ucgd-build-common.os-check-linux-x86, ucgd-build-common.generate-native-sources-linux-x86" if="os.linux.x86_32">
        <!-- Build Linux/x86_32 -->
        <echo>[HOST=LINUX-x86_64] Compiling Linux 32bit - x86_32 binaries</echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="-DCMAKE_BUILD_TYPE=${cpp.build.type}"/>
            <arg line="${cmake.generator.unix}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/${cpp.build.relpath.linux-x86_32}"/>
        </exec>
        <exec executable="cmake" dir="${cpp.build.dir}/${cpp.build.relpath.linux-x86_32}" failonerror="true">
            <arg line="--build ${cpp.build.dir}/${cpp.build.relpath.linux-x86_32}"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="ucgd-build-common.native-copy-resources-linux-x86_32"/>
    </target>

    <!-- Compile for Linux - x86 32bit (64bit Host OS) -->
    <target name="native-build-linux-x86_32-64bit_Host" depends="ucgd-build-common.os-check-linux-x86_64, ucgd-build-common.generate-native-sources-linux-x86" if="os.linux.x86_64">
        <!-- Build Linux/x86_64 -->
        <echo>[HOST=LINUX-x86_64] Compiling Linux 32bit - x86_32 binaries</echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="-DCMAKE_BUILD_TYPE=${cpp.build.type} -DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32 -DCMAKE_SHARED_LINKER_FLAGS=-m32"/>
            <arg line="${cmake.generator.unix}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/${cpp.build.relpath.linux-x86_32}"/>
        </exec>
        <exec executable="cmake" dir="${cpp.build.dir}/${cpp.build.relpath.linux-x86_32}" failonerror="true">
            <arg line="--build ${cpp.build.dir}/${cpp.build.relpath.linux-x86_32}"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="ucgd-build-common.native-copy-resources-linux-x86_32"/>
    </target>

    <!-- Compile for Linux - x86_64 64bit (64bit Host OS) -->
    <target name="native-build-linux-x86_64" depends="ucgd-build-common.os-check-linux-x86_64, ucgd-build-common.generate-native-sources-linux-x86" if="os.linux.x86_64">
        <!-- Build Linux/x86_64 -->
        <echo>[HOST=LINUX-x86_64] Compiling Linux 64bit - x86_64 binaries</echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="-DCMAKE_BUILD_TYPE=${cpp.build.type}"/>
            <arg line="${cmake.generator.unix}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/${cpp.build.relpath.linux-x86_64}"/>
        </exec>
        <exec executable="cmake" dir="${cpp.build.dir}/${cpp.build.relpath.linux-x86_64}" failonerror="true">
            <arg line="--build ${cpp.build.dir}/${cpp.build.relpath.linux-x86_64}"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="ucgd-build-common.native-copy-resources-linux-x86_64"/>
    </target>

    <!-- Compile for Linux - ARM 32bit (Host OS) -->
    <target name="native-build-linux-arm32" depends="ucgd-build-common.os-check-linux-arm32, ucgd-build-common.generate-native-sources-linux-arm" if="os.linux.arm32">
        <!-- Build both architectures when Cross-Compiling -->
        <echo>[HOST=ARM] Compiling ARM 32bit binaries</echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="${cmake.generator.unix}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/${cpp.build.relpath.linux-arm32}"/>
        </exec>
        <exec executable="cmake" dir="${cpp.build.dir}/${cpp.build.relpath.linux-arm32}" failonerror="true">
            <arg line="--build ${cpp.build.dir}/${cpp.build.relpath.linux-arm32}"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="ucgd-build-common.native-copy-resources-linux-arm32"/>
    </target>

    <!-- Compile for Linux - ARM 64bit (Host OS) -->
    <target name="native-build-linux-arm64" depends="ucgd-build-common.os-check-linux-arm64, ucgd-build-common.generate-native-sources-linux-arm" if="os.linux.arm64">
        <!-- Build both architectures when Cross-Compiling -->
        <echo>[HOST=ARM] Compiling ARM 64bit binaries</echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="${cmake.generator.unix}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/${cpp.build.relpath.linux-arm64}"/>
        </exec>
        <exec executable="cmake" dir="${cpp.build.dir}/${cpp.build.relpath.linux-arm64}" failonerror="true">
            <arg line="--build ${cpp.build.dir}/${cpp.build.relpath.linux-arm64}"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="ucgd-build-common.native-copy-resources-linux-arm64"/>
    </target>

    <!-- =========================================================================================== -->
    <!--                            CROSS COMPILE DEFINITIONS                                        -->
    <!-- =========================================================================================== -->

    <!-- Cross-compile for all OS/Arch (Can only be run from Linux) -->
    <target name="native-build-cc-all" depends="ucgd-build-common.cleanup, ucgd-build-common.os-check-linux-x86_64, native-build-linux-x86_32, native-build-linux-x86_32-64bit_Host, native-build-linux-x86_64, native-build-cc-linux-arm32, native-build-cc-linux-arm64" if="os.linux.x86_64">
        <echo message="============================================================================"/>
        <echo message=" "/>
        <echo>Cross-compilation complete</echo>
        <echo message=" "/>
        <echo message="============================================================================"/>
    </target>

    <!-- Cross-compile for Linux - ARM 32bit (applicable only in linux) -->
    <target name="native-build-cc-linux-arm32" depends="ucgd-build-common.os-check-linux-x86_64, ucgd-build-common.init-native-tools-rpi, ucgd-build-common.generate-native-sources-linux-arm" if="os.linux.x86_64">
        <!-- Build Linux/ARM -->
        <echo>[HOST=LINUX-x86_64] Cross-compiling Linux 32bit ARM binaries</echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="-DCMAKE_TOOLCHAIN_FILE=${cpp.tools.rpi.arm32.toolchain}"/>
            <arg line="-DCMAKE_BUILD_TYPE=${cpp.build.type}"/>
            <arg line="${cmake.generator.unix}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/${cpp.build.relpath.linux-arm32}"/>
        </exec>
        <exec executable="cmake" dir="${cpp.build.dir}/${cpp.build.relpath.linux-arm32}" failonerror="true">
            <arg line="--build ${cpp.build.dir}/${cpp.build.relpath.linux-arm32}"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="ucgd-build-common.native-copy-resources-linux-arm32"/>
    </target>

    <!-- Cross-compile for Linux - ARM 64bit (applicable only in linux) -->
    <target name="native-build-cc-linux-arm64" depends="ucgd-build-common.os-check-linux-x86_64, ucgd-build-common.init-native-tools-rpi, ucgd-build-common.generate-native-sources-linux-arm" if="os.linux.x86_64">
        <!-- Build Linux/ARM -->
        <echo>[HOST=LINUX-x86_64] Cross-compiling Linux 64bit ARM binaries</echo>
        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
            <arg line="--target ${cpp.build.target}"/>
            <arg line="-DCMAKE_TOOLCHAIN_FILE=${cpp.tools.rpi.arm64.toolchain}"/>
            <arg line="-DCMAKE_BUILD_TYPE=${cpp.build.type}"/>
            <arg line="${cmake.generator.unix}"/>
            <arg line="-H."/>
            <arg line="-Bbuild/${cpp.build.relpath.linux-arm64}"/>
        </exec>
        <exec executable="cmake" dir="${cpp.build.dir}/${cpp.build.relpath.linux-arm64}" failonerror="true">
            <arg line="--build ${cpp.build.dir}/${cpp.build.relpath.linux-arm64}"/>
            <arg line="--target ${cpp.build.target} --"/>
            <arg line=" -j 4"/>
        </exec>
        <!-- Copy output files to target resources directory -->
        <antcall target="ucgd-build-common.native-copy-resources-linux-arm64"/>
    </target>
</project>