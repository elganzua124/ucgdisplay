<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>pi-display</artifactId>
        <groupId>com.ibasco.pidisplay</groupId>
        <version>0.1-alpha-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <artifactId>pi-display-native</artifactId>
    <packaging>jar</packaging>
    <modelVersion>4.0.0</modelVersion>
    <name>${project.prefix} Native Library</name>

    <properties>
        <lib-output-filename>libpidisp.so</lib-output-filename>
        <lib-output-filename-win>pidisp.dll</lib-output-filename-win>
        <lib-output-name>pidisp</lib-output-name>
        <cpp.proj.dir>${project.basedir}/src/main/cpp</cpp.proj.dir>
        <cpp.build.dir>${cpp.proj.dir}/build</cpp.build.dir>
        <cmake-generator-arg>-G 'CodeBlocks - Unix Makefiles'</cmake-generator-arg>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
        </dependency>
        <dependency>
            <groupId>uk.org.lidalia</groupId>
            <artifactId>sysout-over-slf4j</artifactId>
        </dependency>
        <dependency>
            <groupId>org.scijava</groupId>
            <artifactId>native-lib-loader</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.ant</groupId>
            <artifactId>ant</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
        </dependency>
    </dependencies>

    <!-- Build Profiles for different platforms -->
    <profiles>
        <!-- BUILD PROFILE: Linux - arm -->
        <profile>
            <id>build-linux-arm</id>
            <activation>
                <os>
                    <name>linux</name>
                    <family>unix</family>
                    <arch>arm</arch>
                </os>
            </activation>
            <properties>
                <current-osarch>linux-arm</current-osarch>
            </properties>

            <build>
                <plugins>
                    <!-- Ant-Run Plugin -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <!-- Prepare target directories -->
                            <execution>
                                <id>generate-sources</id>
                                <phase>generate-sources</phase>
                                <configuration>
                                    <target name="generate-sources">
                                        <mkdir dir="target"/>
                                        <mkdir dir="target/classes"/>
                                        <mkdir dir="target/classes/lib"/>
                                        <mkdir dir="target/classes/lib/linux/arm"/>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>

                            <!-- Compile native library using CMake -->
                            <execution>
                                <id>make</id>
                                <phase>compile</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target name="build-pidisp">
                                        <!-- Build both architectures when Cross-Compiling -->
                                        <echo>[HOST=ARM] Building ARM binaries only</echo>
                                        <exec executable="cmake" dir="${project.basedir}/src/main/cpp"
                                              failonerror="true">
                                            <arg line="--target all"/>
                                            <arg line="-G 'CodeBlocks - Unix Makefiles'"/>
                                            <arg line="-H."/>
                                            <arg line="-Bbuild/linux/arm"/>
                                        </exec>
                                        <exec executable="cmake" dir="${project.basedir}/src/main/cpp/build/linux/arm"
                                              failonerror="true">
                                            <arg line="--build ${project.basedir}/src/main/cpp/build/linux/arm"/>
                                            <arg line="--target pidisp --"/>
                                            <arg line=" -j 4"/>
                                        </exec>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>org.apache.ant</groupId>
                                <artifactId>ant</artifactId>
                                <version>${ant.version}</version>
                            </dependency>
                        </dependencies>
                    </plugin>

                    <!-- Copy native libraries to project's target directory -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <!-- Copy ARM binaries -->
                            <execution>
                                <id>copy-lib-arm</id>
                                <phase>compile</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${basedir}/target/classes/lib/linux/arm</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>${project.basedir}/src/main/cpp/build/linux/arm/bin</directory>
                                            <filtering>true</filtering>
                                            <includes>
                                                <include>${lib-output-filename}</include>
                                            </includes>
                                        </resource>
                                    </resources>
                                    <fileNameFiltering>
                                        true
                                    </fileNameFiltering>
                                    <nonFilteredFileExtensions>
                                        <nonFilteredFileExtension>so</nonFilteredFileExtension>
                                    </nonFilteredFileExtensions>
                                    <overwrite>true</overwrite>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- BUILD PROFILE: Linux - x86_64/amd64 -->
        <profile>
            <id>build-linux-amd64</id>
            <activation>
                <os>
                    <name>linux</name>
                    <family>unix</family>
                    <arch>amd64</arch>
                </os>
            </activation>
            <properties>
                <current-osarch>linux-amd64</current-osarch>
            </properties>

            <build>
                <plugins>
                    <!-- Ant-Run Plugin -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <!-- Prepare directories -->
                            <execution>
                                <id>generate-sources</id>
                                <phase>generate-sources</phase>
                                <configuration>
                                    <target name="generate-sources">
                                        <mkdir dir="target"/>
                                        <mkdir dir="target/classes"/>
                                        <mkdir dir="target/classes/lib"/>
                                        <mkdir dir="target/classes/lib/linux/arm"/>
                                        <mkdir dir="target/classes/lib/linux/amd64"/>
                                        <mkdir dir="target/classes/lib/windows/amd64"/>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>

                            <!-- Compile native library using CMake -->
                            <execution>
                                <id>make</id>
                                <phase>compile</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target name="build-pidisp">
                                        <!-- Build both architectures when Cross-Compiling -->
                                        <echo>[HOST=AMD64] Invoking CMAKE Cross-compile build instructions</echo>
                                        <exec executable="cmake" dir="${project.basedir}/src/main/cpp" failonerror="true">
                                            <arg line="--target all"/>
                                            <arg line="-DCMAKE_BUILD_TYPE=Release"/>
                                            <arg line="${cmake-generator-arg}"/>
                                            <arg line="-H."/>
                                            <arg line="-Bbuild/linux/amd64"/>
                                        </exec>
                                        <exec executable="cmake" dir="${project.basedir}/src/main/cpp" failonerror="true">
                                            <arg line="--target all"/>
                                            <arg line="-DCMAKE_TOOLCHAIN_FILE=./cmake/RpiToolchain.cmake"/>
                                            <arg line="-DCMAKE_BUILD_TYPE=Release"/>
                                            <arg line="${cmake-generator-arg}"/>
                                            <arg line="-H."/>
                                            <arg line="-Bbuild/linux/arm"/>
                                        </exec>
                                        <exec executable="cmake" dir="${project.basedir}/src/main/cpp"
                                              failonerror="true">
                                            <arg line="--target all"/>
                                            <arg line="-DCMAKE_TOOLCHAIN_FILE=./cmake/MingWToolchain.cmake"/>
                                            <arg line="-DCMAKE_BUILD_TYPE=Release"/>
                                            <arg line="${cmake-generator-arg}"/>
                                            <arg line="-H."/>
                                            <arg line="-Bbuild/windows/amd64"/>
                                        </exec>
                                        <!-- Build AMD64 -->
                                        <exec executable="cmake" dir="${project.basedir}/src/main/cpp/build/linux/amd64" failonerror="true">
                                            <arg line="--build ${project.basedir}/src/main/cpp/build/linux/amd64"/>
                                            <arg line="--target pidisp --"/>
                                            <arg line=" -j 4"/>
                                        </exec>
                                        <!-- Build ARM -->
                                        <exec executable="cmake" dir="${project.basedir}/src/main/cpp/build/linux/arm" failonerror="true">
                                            <arg line="--build ${project.basedir}/src/main/cpp/build/linux/arm"/>
                                            <arg line="--target pidisp --"/>
                                            <arg line=" -j 4"/>
                                        </exec>
                                        <!-- Build Windows -->
                                        <exec executable="cmake"
                                              dir="${project.basedir}/src/main/cpp/build/windows/amd64"
                                              failonerror="true">
                                            <arg line="--build ${project.basedir}/src/main/cpp/build/windows/amd64"/>
                                            <arg line="--target pidisp --"/>
                                            <arg line=" -j 4"/>
                                        </exec>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>

                        <dependencies>
                            <dependency>
                                <groupId>org.apache.ant</groupId>
                                <artifactId>ant</artifactId>
                                <version>${ant.version}</version>
                            </dependency>
                        </dependencies>
                    </plugin>

                    <!-- Copy native libraries to project's target directory -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <!-- Copy ARM binaries to META-INF/lib -->
                            <execution>
                                <id>copy-lib-arm</id>
                                <phase>compile</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${basedir}/target/classes/lib/linux/arm</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>${project.basedir}/src/main/cpp/build/linux/arm/bin</directory>
                                            <filtering>true</filtering>
                                            <includes>
                                                <include>${lib-output-filename}</include>
                                            </includes>
                                        </resource>
                                    </resources>
                                    <fileNameFiltering>
                                        true
                                    </fileNameFiltering>
                                    <nonFilteredFileExtensions>
                                        <nonFilteredFileExtension>so</nonFilteredFileExtension>
                                    </nonFilteredFileExtensions>
                                    <overwrite>true</overwrite>
                                </configuration>
                            </execution>
                            <!-- Copy x86_64/amd64 binaries to META-INF/lib -->
                            <execution>
                                <id>copy-lib-amd64</id>
                                <phase>compile</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${basedir}/target/classes/lib/linux/amd64</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>${project.basedir}/src/main/cpp/build/linux/amd64/bin</directory>
                                            <filtering>true</filtering>
                                            <includes>
                                                <include>${lib-output-filename}</include>
                                            </includes>
                                        </resource>
                                    </resources>
                                    <nonFilteredFileExtensions>
                                        <nonFilteredFileExtension>so</nonFilteredFileExtension>
                                    </nonFilteredFileExtensions>
                                    <fileNameFiltering>
                                        true
                                    </fileNameFiltering>
                                    <overwrite>true</overwrite>
                                </configuration>
                            </execution>
                            <!-- Copy x86_64/amd64 windows binaries to META-INF/lib -->
                            <execution>
                                <id>copy-lib-amd64-win32</id>
                                <phase>compile</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${basedir}/target/classes/lib/windows/amd64</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>${project.basedir}/src/main/cpp/build/windows/amd64/bin
                                            </directory>
                                            <filtering>true</filtering>
                                            <includes>
                                                <include>${lib-output-filename-win}</include>
                                            </includes>
                                        </resource>
                                    </resources>
                                    <nonFilteredFileExtensions>
                                        <nonFilteredFileExtension>dll</nonFilteredFileExtension>
                                    </nonFilteredFileExtensions>
                                    <fileNameFiltering>
                                        true
                                    </fileNameFiltering>
                                    <overwrite>true</overwrite>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- BUILD PROFILE: Windows - x86_64/amd64 -->
        <profile>
            <id>build-windows-amd64</id>
            <activation>
                <os>
                    <family>windows</family>
                    <arch>amd64</arch>
                </os>
            </activation>
            <properties>
                <current-osarch>windows-amd64</current-osarch>
            </properties>
            <build>
                <plugins>
                    <!-- Ant-Run Plugin -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <!-- Prepare directories -->
                            <execution>
                                <id>generate-sources</id>
                                <phase>generate-sources</phase>
                                <configuration>
                                    <target name="generate-sources">
                                        <mkdir dir="target"/>
                                        <mkdir dir="target/classes"/>
                                        <mkdir dir="target/classes/lib"/>
                                        <mkdir dir="target/classes/lib/linux/arm"/>
                                        <mkdir dir="target/classes/lib/windows/amd64"/>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>make-win</id>
                                <phase>compile</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target name="build-pidisp">
                                        <!-- Refresh CMake cache -->
                                        <echo>[HOST=AMD64] Invoking CMAKE Cross-compile build instructions for windows
                                        </echo>
                                        <exec executable="cmake" dir="${project.basedir}/src/main/cpp" failonerror="true">
                                            <arg line="--target all"/>
                                            <arg line="-DCMAKE_BUILD_TYPE=Release"/>
                                            <arg line="-G 'CodeBlocks - MinGW Makefiles'"/>
                                            <arg line="-H."/>
                                            <arg line="-Bbuild/windows/amd64"/>
                                        </exec>
                                        <!-- Build project -->
                                        <exec executable="cmake" dir="${project.basedir}/src/main/cpp/build/windows/amd64" failonerror="true">
                                            <arg line="--build ${project.basedir}/src/main/cpp/build/windows/amd64"/>
                                            <arg line="--target pidisp --"/>
                                            <arg line=" -j 4"/>
                                        </exec>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Copy native libraries to project's target directory -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <!-- Copy x86_64/amd64 binaries to lib -->
                            <execution>
                                <id>copy-lib-amd64</id>
                                <phase>compile</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${basedir}/target/classes/lib/windows/amd64</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>${project.basedir}/src/main/cpp/build/windows/amd64/bin
                                            </directory>
                                            <filtering>true</filtering>
                                            <includes>
                                                <include>${lib-output-name}.dll</include>
                                            </includes>
                                        </resource>
                                    </resources>
                                    <nonFilteredFileExtensions>
                                        <nonFilteredFileExtension>dll</nonFilteredFileExtension>
                                    </nonFilteredFileExtensions>
                                    <fileNameFiltering>
                                        true
                                    </fileNameFiltering>
                                    <overwrite>true</overwrite>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
            <dependencies>
                <dependency>
                    <groupId>org.apache.ant</groupId>
                    <artifactId>ant</artifactId>
                    <version>${ant.version}</version>
                </dependency>
            </dependencies>
        </profile>

        <!-- BUILD PROFILE: Mac OSX - x86_64/amd64 -->
        <profile>
            <id>build-mac-amd64</id>
            <activation>
                <os>
                    <family>unix</family>
                    <arch>x86_64</arch>
                    <name>mac os x</name>
                </os>
            </activation>
            <properties>
                <current-osarch>mac-amd64</current-osarch>
            </properties>
            <build>
                <plugins>
                    <!-- Ant-Run Plugin -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <!-- Prepare directories -->
                            <execution>
                                <id>generate-sources</id>
                                <phase>generate-sources</phase>
                                <configuration>
                                    <target name="generate-sources">
                                        <mkdir dir="target"/>
                                        <mkdir dir="target/classes"/>
                                        <mkdir dir="target/classes/lib"/>
                                        <mkdir dir="target/classes/lib/mac/amd64"/>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>make-mac</id>
                                <phase>compile</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target name="build-pidisp">
                                        <!-- Refresh CMake cache -->
                                        <echo>[HOST=AMD64] Invoking CMAKE Cross-compile build instructions for Mac OS
                                        </echo>
                                        <exec executable="cmake" dir="${cpp.proj.dir}" failonerror="true">
                                            <arg line="--target all"/>
                                            <arg line="-DCMAKE_BUILD_TYPE=Release"/>
                                            <arg line="-H."/>
                                            <arg line="-Bbuild/mac/amd64"/>
                                        </exec>
                                        <!-- Build project -->
                                        <exec executable="cmake" dir="${cpp.build.dir}/mac/amd64" failonerror="true">
                                            <arg line="--build ${cpp.build.dir}/mac/amd64"/>
                                            <arg line="--target pidisp --"/>
                                            <arg line=" -j 4"/>
                                        </exec>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Copy native libraries to project's target directory -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <!-- Copy x86_64/amd64 binaries to lib -->
                            <execution>
                                <id>copy-lib-amd64</id>
                                <phase>compile</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${basedir}/target/classes/lib/mac/amd64</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>${cpp.build.dir}/mac/amd64/bin
                                            </directory>
                                            <filtering>true</filtering>
                                            <includes>
                                                <include>${lib-output-filename}</include>
                                            </includes>
                                        </resource>
                                    </resources>
                                    <nonFilteredFileExtensions>
                                        <nonFilteredFileExtension>so</nonFilteredFileExtension>
                                    </nonFilteredFileExtensions>
                                    <fileNameFiltering>
                                        true
                                    </fileNameFiltering>
                                    <overwrite>true</overwrite>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
            <dependencies>
                <dependency>
                    <groupId>org.apache.ant</groupId>
                    <artifactId>ant</artifactId>
                    <version>${ant.version}</version>
                </dependency>
            </dependencies>
        </profile>
    </profiles>

    <build>
        <plugins>
            <!-- Native Maven Plugin -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>native-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <goal>javah</goal>
                        </goals>
                        <configuration>
                            <javahVerbose>true</javahVerbose>
                            <javahPath>${env.JAVA_HOME}/bin/javah</javahPath>
                            <javahIncludes>
                                <javahInclude>
                                    <className>com.ibasco.pidisplay.core.system.InputDeviceManager</className>
                                    <headerName>InputDeviceManager.h</headerName>
                                </javahInclude>
                                <javahInclude>
                                    <className>com.ibasco.pidisplay.core.u8g2.U8g2Graphics</className>
                                    <headerName>U8g2Graphics.h</headerName>
                                </javahInclude>
                                <javahInclude>
                                    <className>com.ibasco.pidisplay.core.u8g2.U8g2EventDispatcher</className>
                                    <headerName>U8g2EventDispatcher.h</headerName>
                                </javahInclude>
                            </javahIncludes>
                            <javahOutputDirectory>${project.basedir}/src/main/cpp</javahOutputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Clean Plugin: Remove the native build directory during clean operation -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <configuration>
                    <filesets>
                        <fileset>
                            <directory>src/main/cpp/build</directory>
                            <followSymlinks>false</followSymlinks>
                        </fileset>
                    </filesets>
                </configuration>
            </plugin>

            <!-- JAR Plugin: Include the classes and natives folder in jar packaging -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <!--<addClasspath>true</addClasspath>-->
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>