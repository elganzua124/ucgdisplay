# Download Github Project
function(DOWNLOAD_GITPROJ project_url project_name project_tag)
    if (${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
        set(ARCHIVE_URL ${project_url}/archive/${project_tag}.zip)
        set(ARCHIVE_EXT "zip")
    else ()
        set(ARCHIVE_URL ${project_url}/archive/${project_tag}.tar.gz)
        set(ARCHIVE_EXT "tar.gz")
    endif ()

    set(PROJ_NAME ${project_name})
    string(TOUPPER "[${PROJ_NAME}]" PROJ_TAG)
    set(PROJ_DIR "${LIB_DIR}/${project_name}")

    if (NOT EXISTS ${PROJ_DIR})
        message(STATUS "[DOWNLOAD_GITPROJ] Downloading github project archive '${ARCHIVE_URL}'")
        set(PROJ_ARCHIVE_FILE_NAME ${PROJ_NAME}.${ARCHIVE_EXT})
        set(PROJ_ARCHIVE_FILE_PATH ${LIB_DIR}/${PROJ_ARCHIVE_FILE_NAME})

        if (NOT EXISTS ${PROJ_ARCHIVE_FILE_PATH} AND (NOT EXISTS ${LIB_DIR}/${PROJ_NAME}-master))
            message(STATUS "${PROJ_TAG} Downloading to ${PROJ_ARCHIVE_FILE_PATH}")
            message(STATUS "${PROJ_TAG} Not yet existing: ${PROJ_DIR}, Working directory: ${CMAKE_SOURCE_DIR}")
            file(DOWNLOAD ${ARCHIVE_URL} ${PROJ_ARCHIVE_FILE_PATH} SHOW_PROGRESS)
        endif ()

        if (NOT EXISTS ${LIB_DIR}/${PROJ_NAME}-master)
            message(STATUS "${PROJ_TAG} Extracting '${PROJ_ARCHIVE_FILE_NAME}' to '${LIB_DIR}' (ARCHIVE_EXT = ${ARCHIVE_EXT})")
            if (${ARCHIVE_EXT} STREQUAL "zip")
                execute_process(COMMAND unzip ${PROJ_ARCHIVE_FILE_PATH} WORKING_DIRECTORY ${LIB_DIR} ERROR_VARIABLE tc_unzip)
            else ()
                execute_process(COMMAND tar xvzf ${PROJ_ARCHIVE_FILE_PATH} WORKING_DIRECTORY ${LIB_DIR} ERROR_VARIABLE tc_unzip)
            endif ()

            if (tc_unzip)
                message(FATAL_ERROR "${PROJ_TAG} Could not unzip contents of the downloaded archive '${PROJ_ARCHIVE_FILE_PATH}' (${tc_unzip})")
            endif ()
        else ()
            message(STATUS "${PROJ_TAG} Skipping extraction. Path '${LIB_DIR}/${PROJ_NAME}-master' already exists")
        endif ()

        if (EXISTS ${LIB_DIR}/${PROJ_NAME}-master AND (NOT EXISTS ${PROJ_DIR}))
            message(STATUS "${PROJ_TAG} Moving '${LIB_DIR}/${PROJ_NAME}-master/' to '${PROJ_DIR}'")
            file(RENAME "${LIB_DIR}/${PROJ_NAME}-master/" "${PROJ_DIR}")
        else ()
            message(STATUS "${PROJ_TAG} Skipping rename operation")
        endif ()

        if (EXISTS ${PROJ_ARCHIVE_FILE_PATH})
            message(STATUS "${PROJ_TAG} Removing ${PROJ_ARCHIVE_FILE_PATH} from ${LIB_DIR}")
            file(REMOVE ${PROJ_ARCHIVE_FILE_PATH})
        else ()
            message(STATUS "${PROJ_TAG} Skipping clean-up. ${PROJ_ARCHIVE_FILE_PATH} does not exists")
        endif ()
    else()
        message(STATUS "${PROJ_TAG} Skipping download. Project exists")
    endif ()
endfunction()

function(VERIFY_TOOLCHAIN path)
    message(STATUS "[VERIFY-TOOLCHAIN] Verifying toolchain path = ${path}")
    if (NOT EXISTS ${path})
        message(STATUS "[VERIFY-TOOLCHAIN] Toolchain path '${path}' NOT FOUND")
        set(TOOLCHAIN_VALID false PARENT_SCOPE)
    else ()
        set(C_PATH ${CMAKE_C_COMPILER})
        set(CXX_PATH ${CMAKE_CXX_COMPILER})

        message(STATUS "[VERIFY-TOOLCHAIN] Checking if c and c++ compiler paths are valid")
        message(STATUS "[VERIFY-TOOLCHAIN] C_COMPILER = ${C_PATH}")
        message(STATUS "[VERIFY-TOOLCHAIN] CXX_COMPILER = ${CXX_PATH}")

        if (EXISTS ${C_PATH} AND EXISTS ${CXX_PATH})
            set(TOOLCHAIN_VALID true PARENT_SCOPE)
        else ()
            set(TOOLCHAIN_VALID false PARENT_SCOPE)
        endif ()
    endif ()
endfunction()