if (WIN32)
    message(STATUS "[MAIN] You are running on WINDOWS with processor = ${CMAKE_SYSTEM_PROCESSOR}")
elseif (APPLE)
    message(STATUS "[MAIN] You are running on MAC OS with processor = ${CMAKE_SYSTEM_PROCESSOR}")
elseif (UNIX)
    message(STATUS "[MAIN] You are running on unix/linux with processor = ${CMAKE_SYSTEM_PROCESSOR}")
elseif (MSVC)
    message(STATUS "[MAIN] You are running on MSVC with processor = ${CMAKE_SYSTEM_PROCESSOR}")
endif ()

option(USE_DEV "Use UDev for Device Status monitoring instead of INotify" OFF)

set(CMAKE_VERBOSE_MAKEFILE OFF)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/../../../../../cmake")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all Libraries")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all Executables")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all static libraries")
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(TOOLS_DIR_PATH ${CMAKE_CURRENT_SOURCE_DIR}/tools)
set(JDK_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../../../../../include)

message(STATUS "[MAIN] TOOLS DIR = ${TOOLS_DIR_PATH}")
message(STATUS "[MAIN] CURRENT LIST DIR = ${CMAKE_CURRENT_LIST_DIR}")
message(STATUS "[MAIN] CROSS COMPILE  = ${CMAKE_CROSSCOMPILING}")
message(STATUS "[MAIN] HOST OS        = ${CMAKE_HOST_SYSTEM_NAME}")
message(STATUS "[MAIN] TARGET OS      = ${CMAKE_SYSTEM_NAME}")
message(STATUS "[MAIN] TARGET ARCH    = ${CMAKE_SYSTEM_PROCESSOR}")
message(STATUS "[MAIN] JDK INC DIR    = ${JDK_INCLUDE_DIR}")

# Adhere to GNU filesystem layout conventions
include(GNUInstallDirs)

set(LIB_DIR "${CMAKE_SOURCE_DIR}/lib")

string(TOLOWER ${CMAKE_SYSTEM_NAME} TARGET_OS)

# Find JAVA_HOME/INCLUDE DIR
if (CMAKE_CROSSCOMPILING)

    # Use CMAKE_SYSTEM_NAME to check OS
    if (TARGET_OS STREQUAL "windows")
        set(JDK_SEARCH_PATH "${JDK_INCLUDE_DIR}/jdk/windows/${CMAKE_SYSTEM_PROCESSOR}")
    elseif(TARGET_OS STREQUAL "linux")
        set(JDK_SEARCH_PATH "${JDK_INCLUDE_DIR}/jdk/linux/${CMAKE_SYSTEM_PROCESSOR}")
    elseif(TARGET_OS STREQUAL "darwin")
        set(JDK_SEARCH_PATH "${JDK_INCLUDE_DIR}/jdk/darwin/${CMAKE_SYSTEM_PROCESSOR}")
    else()
        message(FATAL_ERROR "[FIND-JNI] Target OS/ARCH not supported = ${TARGET_OS}/${CMAKE_SYSTEM_PROCESSOR}")
    endif()

    if (NOT EXISTS ${JDK_SEARCH_PATH})
        message(FATAL_ERROR "JDK SEARCH PATH NOT FOUND = ${JDK_SEARCH_PATH}")
    else()
        message(STATUS "Using JDK SEARCH PATH = ${JDK_SEARCH_PATH}")
    endif ()

    # Find JDK
    file(GLOB files "${JDK_SEARCH_PATH}/jdk11")
    foreach (file ${files})
        set(JAVA_HOME ${file})
        break()
    endforeach ()
endif ()

message(STATUS "[MAIN] JAVA_HOME: '${JAVA_HOME}'")

find_package(JNILib REQUIRED)

list(APPEND INC_DIRS ${JNI_INCLUDE_DIRS})
list(APPEND LINK_LIBS "")

if (WIN32)
    set(CMAKE_SHARED_LIBRARY_PREFIX "")
endif ()

# Download Github Project
function(DOWNLOAD_GITPROJ project_url project_name project_tag)
    if (${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
        set(ARCHIVE_URL ${project_url}/archive/${project_tag}.zip)
        set(ARCHIVE_EXT "zip")
    else ()
        set(ARCHIVE_URL ${project_url}/archive/${project_tag}.tar.gz)
        set(ARCHIVE_EXT "tar.gz")
    endif ()

    set(PROJ_NAME ${project_name})
    string(TOUPPER "[${PROJ_NAME}]" PROJ_TAG)
    set(PROJ_DIR "${LIB_DIR}/${project_name}")

    if (NOT EXISTS ${PROJ_DIR})
        message(STATUS "[DOWNLOAD_GITPROJ] Downloading github project archive '${ARCHIVE_URL}'")
        set(PROJ_ARCHIVE_FILE_NAME ${PROJ_NAME}.${ARCHIVE_EXT})
        set(PROJ_ARCHIVE_FILE_PATH ${LIB_DIR}/${PROJ_ARCHIVE_FILE_NAME})

        if (NOT EXISTS ${PROJ_ARCHIVE_FILE_PATH} AND (NOT EXISTS ${LIB_DIR}/${PROJ_NAME}-master))
            message(STATUS "${PROJ_TAG} Downloading to ${PROJ_ARCHIVE_FILE_PATH}")
            message(STATUS "${PROJ_TAG} Not yet existing: ${PROJ_DIR}, Working directory: ${CMAKE_SOURCE_DIR}")
            file(DOWNLOAD ${ARCHIVE_URL} ${PROJ_ARCHIVE_FILE_PATH} SHOW_PROGRESS)
        endif ()

        if (NOT EXISTS ${LIB_DIR}/${PROJ_NAME}-master)
            message(STATUS "${PROJ_TAG} Extracting '${PROJ_ARCHIVE_FILE_NAME}' to '${LIB_DIR}' (ARCHIVE_EXT = ${ARCHIVE_EXT})")
            if (${ARCHIVE_EXT} STREQUAL "zip")
                execute_process(COMMAND unzip ${PROJ_ARCHIVE_FILE_PATH} WORKING_DIRECTORY ${LIB_DIR} ERROR_VARIABLE tc_unzip)
            else ()
                execute_process(COMMAND tar xvzf ${PROJ_ARCHIVE_FILE_PATH} WORKING_DIRECTORY ${LIB_DIR} ERROR_VARIABLE tc_unzip)
            endif ()

            if (tc_unzip)
                message(FATAL_ERROR "${PROJ_TAG} Could not unzip contents of the downloaded archive '${PROJ_ARCHIVE_FILE_PATH}' (${tc_unzip})")
            endif ()
        else ()
            message(STATUS "${PROJ_TAG} Skipping extraction. Path '${LIB_DIR}/${PROJ_NAME}-master' already exists")
        endif ()

        if (EXISTS ${LIB_DIR}/${PROJ_NAME}-master AND (NOT EXISTS ${PROJ_DIR}))
            message(STATUS "${PROJ_TAG} Moving '${LIB_DIR}/${PROJ_NAME}-master/' to '${PROJ_DIR}'")
            file(RENAME "${LIB_DIR}/${PROJ_NAME}-master/" "${PROJ_DIR}")
        else ()
            message(STATUS "${PROJ_TAG} Skipping rename operation")
        endif ()

        if (EXISTS ${PROJ_ARCHIVE_FILE_PATH})
            message(STATUS "${PROJ_TAG} Removing ${PROJ_ARCHIVE_FILE_PATH} from ${LIB_DIR}")
            file(REMOVE ${PROJ_ARCHIVE_FILE_PATH})
        else ()
            message(STATUS "${PROJ_TAG} Skipping clean-up. ${PROJ_ARCHIVE_FILE_PATH} does not exists")
        endif ()
    else()
        message(STATUS "${PROJ_TAG} Skipping download. Project exists")
    endif ()
endfunction()