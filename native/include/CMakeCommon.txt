# Global CMake options

# add the binary tree to the search path for include files
# so that we will find UcgdConfig.h, UcgiConfig.h
include_directories("${PROJECT_BINARY_DIR}")

# set(CMAKE_DEBUG_TARGET_PROPERTIES INCLUDE_DIRECTORIES)

set(CMAKE_VERBOSE_MAKEFILE ON)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/../../../../../cmake")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all Libraries")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all Executables")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all static libraries")
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_EXECUTE_PROCESS_COMMAND_ECHO STDOUT) # to be used with CMake 3.15 and above
set(TOOLS_DIR_PATH ${CMAKE_CURRENT_SOURCE_DIR}/tools)
get_filename_component(PROJ_INCLUDE_DIR "" REALPATH BASE_DIR "${PROJECT_SOURCE_DIR}/../../../../../include")
set(JDK_INCLUDE_DIR ${PROJ_INCLUDE_DIR})

# Fix link errors when compiling executable binaries
set(CMAKE_INSTALL_RPATH "$ORIGIN")
set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)

include(${PROJ_INCLUDE_DIR}/CMakeFunctions.txt)

get_filename_component(CMAKE_MODULE_PATH "" REALPATH BASE_DIR "${CMAKE_MODULE_PATH}")
get_filename_component(JDK_INCLUDE_DIR "" REALPATH BASE_DIR "${JDK_INCLUDE_DIR}")

# Adhere to GNU filesystem layout conventions
include(GNUInstallDirs)

set(LIB_DIR "${CMAKE_SOURCE_DIR}/lib")

string(TOLOWER ${CMAKE_SYSTEM_NAME} TARGET_OS)

# Find JAVA_HOME/INCLUDE DIR
if (CMAKE_CROSSCOMPILING)

    # Use CMAKE_SYSTEM_NAME to check OS
    if (TARGET_OS STREQUAL "windows")
        set(JDK_SEARCH_PATH "${JDK_INCLUDE_DIR}/jdk/windows/${CMAKE_SYSTEM_PROCESSOR}")
    elseif(TARGET_OS STREQUAL "linux")
        set(JDK_SEARCH_PATH "${JDK_INCLUDE_DIR}/jdk/linux/${CMAKE_SYSTEM_PROCESSOR}")
    elseif(TARGET_OS STREQUAL "darwin")
        set(JDK_SEARCH_PATH "${JDK_INCLUDE_DIR}/jdk/darwin/${CMAKE_SYSTEM_PROCESSOR}")
    else()
        message(FATAL_ERROR "[MAIN] Target OS/ARCH not supported = ${TARGET_OS}/${CMAKE_SYSTEM_PROCESSOR}")
    endif()

    if (NOT EXISTS ${JDK_SEARCH_PATH})
        message(FATAL_ERROR "[MAIN] JDK SEARCH PATH NOT FOUND = ${JDK_SEARCH_PATH}")
    endif ()

    # Find JDK
    file(GLOB files "${JDK_SEARCH_PATH}/jdk11")
    foreach (file ${files})
        set(JAVA_HOME ${file})
        break()
    endforeach ()
endif ()

find_package(JNILib REQUIRED)

list(APPEND INC_DIRS ${JNI_INCLUDE_DIRS})
list(APPEND LINK_LIBS "")

if (WIN32)
    set(CMAKE_SHARED_LIBRARY_PREFIX "")
endif ()

cmake_host_system_information(RESULT HOSTNAME QUERY HOSTNAME)
cmake_host_system_information(RESULT PROCESSOR_NAME QUERY PROCESSOR_NAME)
cmake_host_system_information(RESULT OS_NAME QUERY OS_NAME)
cmake_host_system_information(RESULT OS_RELEASE QUERY OS_RELEASE)
cmake_host_system_information(RESULT OS_VERSION QUERY OS_VERSION)
cmake_host_system_information(RESULT OS_PLATFORM QUERY OS_PLATFORM)

if (CMAKE_CROSSCOMPILING)
    message(STATUS "[TOOLCHAIN] -------------------------------------------------------------------------------------------------")
    message(STATUS "[TOOLCHAIN] ${TOOLCHAIN_DESC}")
    message(STATUS "[TOOLCHAIN] -------------------------------------------------------------------------------------------------")
    message(STATUS "[TOOLCHAIN] CMAKE_CURRENT_LIST_DIR = ${CMAKE_CURRENT_LIST_DIR}")
    message(STATUS "[TOOLCHAIN] CMAKE_MODULE_PATH      = ${CMAKE_MODULE_PATH}")
    message(STATUS "[TOOLCHAIN] TOOLS_DIR_PATH         = ${TOOLS_DIR_PATH}")
    message(STATUS "[TOOLCHAIN] TOOLCHAIN_PATH         = ${RPI_TOOLCHAIN_PATH}")
    message(STATUS "[TOOLCHAIN] -------------------------------------------------------------------------------------------------")
    message(STATUS "[TOOLCHAIN] MAKE                   = ${CMAKE_MAKE_PROGRAM}")
    message(STATUS "[TOOLCHAIN] CMAKE_C_COMPILER       = ${CMAKE_C_COMPILER}")
    message(STATUS "[TOOLCHAIN] CMAKE_CXX_COMPILER     = ${CMAKE_CXX_COMPILER}")
    message(STATUS "[TOOLCHAIN] SYSROOT                = ${CMAKE_SYSROOT}")
    message(STATUS "[TOOLCHAIN] -------------------------------------------------------------------------------------------------")
endif()

message(STATUS "")
message(STATUS "[MAIN] ----------------------------------------------------------------------------------------------------------")
message(STATUS "[MAIN] CMake Build Variables")
message(STATUS "[MAIN] ----------------------------------------------------------------------------------------------------------")
message(STATUS "[MAIN] OS_NAME                               = ${OS_NAME}")
message(STATUS "[MAIN] OS_RELEASE                            = ${OS_RELEASE}")
message(STATUS "[MAIN] OS_VERSION                            = ${OS_VERSION}")
message(STATUS "[MAIN] OS_PLATFORM                           = ${OS_PLATFORM}")
message(STATUS "[MAIN] PROCESSOR_NAME                        = ${PROCESSOR_NAME}")
message(STATUS "[MAIN] HOSTNAME                              = ${HOSTNAME}")
message(STATUS "[MAIN] CROSS COMPILE                         = ${CMAKE_CROSSCOMPILING}")
message(STATUS "[MAIN] HOST OS                               = ${CMAKE_HOST_SYSTEM_NAME}")
message(STATUS "[MAIN] TARGET OS (CMAKE_SYSTEM_NAME)         = ${CMAKE_SYSTEM_NAME}")
message(STATUS "[MAIN] TARGET ARCH (CMAKE_SYSTEM_PROCESSOR)  = ${CMAKE_SYSTEM_PROCESSOR}")
message(STATUS "[MAIN] JDK_SEARCH_PATH                       = ${JDK_SEARCH_PATH}")
message(STATUS "[MAIN] JDK INC DIR                           = ${JDK_INCLUDE_DIR}")
message(STATUS "[MAIN] PROJ INC DIR                          = ${PROJ_INCLUDE_DIR}")
message(STATUS "[MAIN] CMAKE_CURRENT_SOURCE_DIR              = ${CMAKE_CURRENT_SOURCE_DIR}")
message(STATUS "[MAIN] TOOLS DIR                             = ${TOOLS_DIR_PATH}")
message(STATUS "[MAIN] CURRENT LIST DIR                      = ${CMAKE_CURRENT_LIST_DIR}")
message(STATUS "[MAIN] CMAKE_C_FLAGS                         = ${CMAKE_C_FLAGS}")
message(STATUS "[MAIN] CMAKE_CXX_FLAGS                       = ${CMAKE_CXX_FLAGS}")
message(STATUS "[MAIN] CMAKE_MODULE_LINKER_FLAGS             = ${CMAKE_MODULE_LINKER_FLAGS}")
message(STATUS "[MAIN] CMAKE_SHARED_LINKER_FLAGS             = ${CMAKE_SHARED_LINKER_FLAGS}")
message(STATUS "[MAIN] CMAKE_STATIC_LINKER_FLAGS             = ${CMAKE_STATIC_LINKER_FLAGS}")
message(STATUS "[MAIN] CMAKE_MAKE_PROGRAM                    = ${CMAKE_MAKE_PROGRAM}")
message(STATUS "[MAIN] CMAKE_C_COMPILER                      = ${CMAKE_C_COMPILER}")
message(STATUS "[MAIN] CMAKE_CXX_COMPILER                    = ${CMAKE_CXX_COMPILER}")
message(STATUS "[MAIN] CMAKE_AR                              = ${CMAKE_AR}")
message(STATUS "[MAIN] CMAKE_STRIP                           = ${CMAKE_STRIP}")
message(STATUS "[MAIN] CMAKE_SYSROOT                         = ${CMAKE_SYSROOT}")
message(STATUS "[MAIN] INCL-LIBRARIES                        = ${INC_DIRS}")
message(STATUS "[MAIN] LINK-LIBRARIES                        = ${LINK_LIBS}")
message(STATUS "[MAIN] JAVA_HOME                             = ${JAVA_HOME}")
message(STATUS "[MAIN] JNI_INCLUDE_DIRS                      = ${JNI_INCLUDE_DIRS}")
message(STATUS "[MAIN] JNI_LIBRARIES                         = ${JNI_LIBRARIES}")
message(STATUS "[MAIN] PROJECT_SOURCE_DIR                    = ${PROJECT_SOURCE_DIR}")
message(STATUS "[MAIN] PROJECT_BINARY_DIR                    = ${PROJECT_BINARY_DIR}")
message(STATUS "[MAIN] CMAKE_EXE_LINKER_FLAGS                = ${CMAKE_EXE_LINKER_FLAGS}")
message(STATUS "[MAIN] ----------------------------------------------------------------------------------------------------------")